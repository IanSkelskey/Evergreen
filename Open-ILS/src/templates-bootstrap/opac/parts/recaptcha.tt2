<!--------------------------------------------------------------------------------
    Module:       templates-bootstrap/opac/parts/recaptcha.tt2
    Author:       Ian Skelskey <ianskelskey@gmail.com>
    Organization: Bibliomation, Inc.
    Year:         2024
    Description:  Template Toolkit file for reCAPTCHA form validation in the OPAC.
-------------------------------------------------------------------------------->
[% 
   org_unit = ctx.search_ou;
   recaptcha_site_key = ctx.get_org_setting(org_unit, 'recaptcha.site_key');
   action_name = action_name || 'register';        # Default action name if none is provided
   submit_action = submit_action || 'submit';      # Default submit action if none is provided
   target_element_id = target_element_id || 'recaptcha-form'; # Default target element ID
   recaptcha_enabled = ctx.get_org_setting(ctx.search_ou, 'recaptcha.enable');
%]
[% IF recaptcha_enabled && recaptcha_enabled == 1 %]
    <!-- Dependencies -->
    <script src="https://www.google.com/recaptcha/api.js?render=[% recaptcha_site_key %]"></script>
    <script src="/opac/common/js/opensrf.js"></script>
    <script src="/opac/common/js/opensrf_xhr.js"></script>
    <script src="/opac/common/js/JSON_v1.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.getElementById('[% target_element_id %]');
            if (!form) return;

            // Create and append reCAPTCHA container dynamically
            const recaptchaContainer = createRecaptchaContainer();
            form.appendChild(recaptchaContainer);

            // Add event listener to the form for reCAPTCHA validation
            form.addEventListener('[% submit_action %]', event => {
                event.preventDefault();
                if (!form.checkValidity()) {
                    form.classList.add('was-validated');
                    return;
                }
                grecaptcha.ready(() => {
                    grecaptcha.execute('[% recaptcha_site_key %]', { action: '[% action_name %]' })
                        .then(handleRecaptchaToken);
                });
            });

            function createRecaptchaContainer() {
                const container = document.createElement('div');
                container.id = 'recaptcha-container';
                return container;
            }

            function handleRecaptchaToken(token) {
                console.log('Sending reCAPTCHA verification request...');
                const session = new OpenSRF.ClientSession('biblio.recaptcha');
                const request = session.request('biblio.recaptcha.verify', {
                    token,
                    org_unit: '[% org_unit %]'
                });

                request.oncomplete = response => processRecaptchaResponse(response, form);
                request.send();
            }

            function processRecaptchaResponse(response, form) {
                let msg;
                while ((msg = response.recv())) {
                    try {
                        const responseContent = JSON.parse(msg.content());
                        console.log('reCAPTCHA response:', responseContent);
                        if (responseContent.success === 1) {
                            form.submit();
                        } else {
                            alert('reCAPTCHA validation failed. Please try again.');
                        }
                    } catch (error) {
                        console.error('Error parsing reCAPTCHA response as JSON:', error);
                        alert('Error in reCAPTCHA validation. Please try again.');
                    }
                }
            }
        });
    </script>
[% ELSE %]
    <script>
        console.log('org_unit:', '[% org_unit %]');
        console.log('recaptcha_enabled:', '[% recaptcha_enabled %]');
        console.log('reCAPTCHA is not enabled for this organization unit.');
    </script>
[% END %]
