<!--------------------------------------------------------------------------------
    Module:       templates-bootstrap/opac/parts/recaptcha.tt2
    Author:       Ian Skelskey <ianskelskey@gmail.com>
    Organization: Bibliomation, Inc.
    Year:         2024
    Description:  Template Toolkit file for reCAPTCHA form validation in the OPAC.
-------------------------------------------------------------------------------->
[% 
   recaptcha_site_key = ctx.get_org_setting(ctx.search_ou, 'recaptcha.site_key');
   action_name = action_name || 'register';        # Default action name if none is provided
   submit_action = submit_action || 'submit';      # Default submit action if none is provided
   target_element_id = target_element_id || 'recaptcha-form'; # Default target element ID
%]

<!-- reCAPTCHA -->
<script src="https://www.google.com/recaptcha/api.js?render=[% recaptcha_site_key %]"></script>
<script type='text/javascript' src='/opac/common/js/opensrf.js'></script>
<script type='text/javascript' src='/opac/common/js/opensrf_xhr.js'></script>
<script type='text/javascript' src='/opac/common/js/JSON_v1.js'></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const form = document.getElementById('[% target_element_id %]');
        if (!form) { return; }

        // Dynamically insert the reCAPTCHA container div within the form
        const recaptchaContainer = document.createElement('div');
        recaptchaContainer.id = 'recaptcha-container';
        form.appendChild(recaptchaContainer);

        // ReCAPTCHA form validation
        function handleRecaptchaAndSubmit(token) {
            var ses = new OpenSRF.ClientSession('biblio.recaptcha');
            var req = ses.request('biblio.recaptcha.verify', token);

            req.oncomplete = function (r) {
                var msg;
                while (msg = r.recv()) {
                    var responseContent;
                    try {
                        responseContent = JSON.parse(msg.content());
                    } catch (e) {
                        console.error("Error parsing reCAPTCHA response content as JSON: ", e);
                        alert("Error in reCAPTCHA validation. Please try again.");
                        return;
                    }

                    if (responseContent && responseContent.success === 1) {
                        form.submit();
                    } else {
                        alert("reCAPTCHA validation failed. Please try again.");
                    }
                }
            };

            req.send();
        }

        form.addEventListener('[% submit_action %]', function (event) {
            event.preventDefault();

            if (form.checkValidity()) {
                grecaptcha.ready(function () {
                    grecaptcha.execute('[% recaptcha_site_key %]', { action: '[% action_name %]' })
                        .then(function (token) {
                            handleRecaptchaAndSubmit(token);
                        });
                });
            } else {
                form.classList.add('was-validated');
            }
        });
    });
</script>
